<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="Logging" Id="{c7fc7173-d1e1-4504-b50d-ca5e93deabf1}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Logging
VAR
	// Logging voriables
	EnvironmentLog,
	DustLog,
	HumidityLog,
	HumidityErrorLog,
	HumidityBayLog,
	WindSpeedLog,
	WindSpeedBayLog,
	Rain1Log,
	Rain2Log,
	OpenRoof1Log, CloseRoof1Log, StopRoof1Log,
	OpenRoof2Log, CloseRoof2Log, StopRoof2Log,
	Roof1StatusLog, Roof2StatusLog,
	Roof1ErrorLog, Roof2ErrorLog,
	Roof1WarningLog, Roof2WarningLog,
	LightLog,
	ManualLog: FB_EventLog;
	
	ElectronicsTemperatureLog,
	ElectronicsHumidityLog,
	SpectrographTemperatureLog,
	SpectrographHumidityLog,
	UsUndervoltageLog,
	UpUndervoltageLog,
	MotorProtection1Log,
	MotorProtection2Log: FB_EventLog;
	
	RoofOpenTimeoutLog,
	RoofCloseTimeoutLog,
	Roof1LockTimeoutLog,
	Roof2LockTimeoutLog,
	Roof1UnlockTimeoutLog,
	Roof2UnlockTimeoutLog:	FB_EventLog;
	
	LastRoof1Status,
	LastRoof2Status:	E_RoofStatus;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*** Logging Section ***)

EnvironmentLog(	Trigger := MAIN.EnvironmentAlarm, Level := ADSLOG_MSGTYPE_WARN, OnMessage := 'The weather is bad!', OffMessage := 'The weather is good.');
DustLog(		Trigger := Environment.DustAvg.AVG > MAIN.DustLimit, Level := ADSLOG_MSGTYPE_WARN, OnMessage := 'Dust is over limit!');
HumidityLog(	Trigger := Main.HumidityTrigger.Q1, Level := ADSLOG_MSGTYPE_WARN, OnMessage := 'Humidity is over limit!');
HumidityErrorLog(	Trigger := Environment.HumidityBay > 85.0, Level := ADSLOG_MSGTYPE_ERROR, OnMessage := 'Bay humidity is high! Dehumidifier failure!');
HumidityBayLog(	Trigger := Environment.BayHumidityTrigger.Q1, Level := ADSLOG_MSGTYPE_WARN, OnMessage := 'Bay humidity bay is over limit', OffMessage := 'Bay humidity is nominal.');
WindSpeedLog(	Trigger := Environment.WindSpeed > MAIN.WindSpeedLimit, Level := ADSLOG_MSGTYPE_WARN, OnMessage := 'Wind speed is over limit!');
WindSpeedBayLog(Trigger := Environment.Windspeed_bay > MAIN.WindSpeedBayLimit, Level := ADSLOG_MSGTYPE_WARN, OnMessage := 'Wind speed in bay is over limit');
Rain1Log(		Trigger := NOT GVL_Environment.Rain_alarm1, Level := ADSLOG_MSGTYPE_WARN, OnMessage := 'Rain alarm 1 is on!');
Rain2Log(		Trigger := NOT GVL_Environment.Rain_alarm2, Level := ADSLOG_MSGTYPE_WARN, OnMessage := 'Rain alarm 2 is on!');

OpenRoof1Log( Trigger := MAIN.Roof1Command = OpenRoof, OnMessage := 'Open roof 1');
OpenRoof2Log( Trigger := MAIN.Roof2Command = OpenRoof, OnMessage := 'Open roof 2');
CloseRoof1Log( Trigger := MAIN.Roof1Command = CloseRoof, OnMessage := 'Close roof 1');
CloseRoof2Log( Trigger := MAIN.Roof2Command = CloseRoof, OnMessage := 'Close roof 2');
StopRoof1Log( Trigger := MAIN.Roof1Command = StopRoof, OnMessage := 'Stop roof 1');
StopRoof2Log( Trigger := MAIN.Roof2Command = StopRoof, OnMessage := 'Stop roof 2');

Roof1ErrorLog( Trigger := MAIN.Roof1Status = StatusError, Level := ADSLOG_MSGTYPE_ERROR, OnMessage := 'Roof 1 has an error!');
Roof2ErrorLog( Trigger := MAIN.Roof2Status = StatusError, Level := ADSLOG_MSGTYPE_ERROR, OnMessage := 'Roof 2 has an error!');

Roof1WarningLog( Trigger := MAIN.Roof1Status = StatusUndefined, Level := ADSLOG_MSGTYPE_WARN, OnMessage := 'The status of roof 1 is undefined!');
Roof2WarningLog( Trigger := MAIN.Roof2Status = StatusUndefined, Level := ADSLOG_MSGTYPE_WARN, OnMessage := 'The status of roof 2 is undefined!');

Roof1StatusLog( Trigger :=  MAIN.Roof1Status <> LastRoof1Status, FormatString := 'Roof1 status: %s', OnMessage := RoofStatus_TO_String(Main.Roof1Status, Quoted := FALSE));
Roof2StatusLog( Trigger :=  MAIN.Roof2Status <> LastRoof2Status, FormatString := 'Roof2 status: %s', OnMessage := RoofStatus_TO_String(Main.Roof2Status, Quoted := FALSE));
LastRoof1Status := MAIN.Roof1Status;
LastRoof2Status := MAIN.Roof2Status;

LightLog(Trigger := GVL_Environment.LightBay, OnMessage := 'The light is on.', OffMessage := 'The light is off.');
ManualLog(Trigger := MAIN.isRoofManual, Level := ADSLOG_MSGTYPE_WARN, OnMessage := 'Roof is in manual mode.', OffMessage := 'Roof is in automatic mode.');

ElectronicsTemperatureLog( Trigger := Environment.ElectronicsTemperatureTrigger.Q1 , 
							Level := ADSLOG_MSGTYPE_ERROR, 
							OnMessage := 'Electronics temperature is over limit!');

ElectronicsHumidityLog( Trigger := Environment.ElectronicsHumidityTrigger.Q1 , 
							Level := ADSLOG_MSGTYPE_ERROR, 
							OnMessage := 'Electronics humidity is over limit!');

SpectrographTemperatureLog( Trigger := Environment.SpectrographTemperatureTrigger.Q1 , 
							Level := ADSLOG_MSGTYPE_ERROR, 
							OnMessage := 'Spectrograph temperature is over limit!');

SpectrographHumidityLog( Trigger := Environment.SpectrographHumidityTrigger.Q1 , 
							Level := ADSLOG_MSGTYPE_ERROR, 
							OnMessage := 'Spectrograph humidity is over limit!');
UsUndervoltageLog( Trigger := GVL_Panel.Us_Undervoltage, 
							Level := ADSLOG_MSGTYPE_ERROR, 
							OnMessage := 'Us undervoltage!');
UpUndervoltageLog( Trigger := GVL_Panel.Up_Undervoltage, 
							Level := ADSLOG_MSGTYPE_ERROR, 
							OnMessage := 'Up undervoltage! / EMERGENCY STOP!');
MotorProtection1Log( Trigger := Auxiliary.NC1Status <> 0, 
							Level := ADSLOG_MSGTYPE_ERROR, 
							OnMessage := 'Roof1 motor protection fault!');
MotorProtection2Log( Trigger := Auxiliary.NC2Status <> 0, 
							Level := ADSLOG_MSGTYPE_ERROR, 
							OnMessage := 'Roof2 motor protection fault!');
							
RoofOpenTimeoutLog( Trigger := MAIN.Roof1OpenTimeOut.Q OR MAIN.Roof2OpenTimeOut.Q, Level := ADSLOG_MSGTYPE_ERROR, OnMessage := 'Roof time out error while opening!');
RoofCloseTimeoutLog( Trigger := MAIN.Roof1CloseTimeOut.Q OR MAIN.Roof2CloseTimeOut.Q, Level := ADSLOG_MSGTYPE_ERROR, OnMessage := 'Roof timeout error while closing!');

Roof1LockTimeoutLog( Trigger := MAIN.Roof1LockTimeOut.Q, Level := ADSLOG_MSGTYPE_ERROR, OnMessage := 'Roof1 lock time out!');
Roof2LockTimeoutLog( Trigger := MAIN.Roof2LockTimeOut.Q, Level := ADSLOG_MSGTYPE_ERROR, OnMessage := 'Roof2 lock time out!');
Roof1UnlockTimeoutLog( Trigger := MAIN.Roof1UnlockTimeOut.Q, Level := ADSLOG_MSGTYPE_ERROR, OnMessage := 'Roof1 unlock time out!');
Roof2UnlockTimeoutLog( Trigger := MAIN.Roof2UnlockTimeOut.Q, Level := ADSLOG_MSGTYPE_ERROR, OnMessage := 'Roof2 unlock time out!');
]]></ST>
    </Implementation>
    <LineIds Name="Logging">
      <LineId Id="22" Count="4" />
      <LineId Id="50" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="31" Count="15" />
      <LineId Id="175" Count="2" />
      <LineId Id="179" Count="1" />
      <LineId Id="178" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="62" Count="11" />
      <LineId Id="77" Count="1" />
      <LineId Id="61" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="79" Count="0" />
      <LineId Id="87" Count="2" />
      <LineId Id="91" Count="1" />
      <LineId Id="90" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="126" Count="1" />
      <LineId Id="164" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="166" Count="2" />
      <LineId Id="165" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>