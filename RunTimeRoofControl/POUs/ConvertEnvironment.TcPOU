<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="ConvertEnvironment" Id="{03869fa8-1755-402e-a7ee-189c483e0438}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM ConvertEnvironment
VAR
	WindSpeed1:		REAL;
	Temperature1:	REAL;
	Humidity1:		REAL;
	Rain_analogue1:	REAL;
	WindDirection:	REAL;
	Pressure:		REAL;
	
	WindSpeed2:		REAL;
	Temperature2:	REAL;
	Humidity2:		REAL;
	Rain_analogue2:	REAL;
	Brightness:		REAL;
	
	// electronics room temperature
	Temperature_Electronics:	REAL;
	// electronics room humidity
	Humidity_Electronics:		REAL;
	// telescope bay temperature
	TemperatureBay:	REAL;
	// telescope bay humidity
	HumidityBay:	REAL;
	// SES Spectrograph temperature
	Temperature_Spec:	REAL;
	// SES spectrograph humidity
	Humidity_Spec:		REAL;
	// wind speed at bay
	Windspeed_bay:		REAL;
	// analog dust sensor
	Dust:				REAL;
	// raw rain current (helper variable)
	Rain1Current:		REAL;
	// raw rain current (helper variable)
	Rain2Current:		REAL;
	// digital rain sensor
	RainAlarm1:			BOOL;
	// digital rain sensor
	RainAlarm2:			BOOL;
	// combination of rain sensors
	RainMasterAlarm:	BOOL;
	// delay timer for digital rain signal 1
	RainTimer1:			TON;
	// delay timer for digital rain signal 2
	RainTimer2:			TON;
	// delay timer for combined rain signals
	RainMasterTimer:	TON;
	// maximum wind speed 1
	MaximumWind1: REAL;
	MaximumWind2: REAL;
	DustAvg:	FB_TimeAverage;
	WindAvg1:	FB_TimeAverage; 
	Windavg2:	FB_TimeAverage;
	PressureAverage:	FB_TimeAverage;
	
	Dust11Average:	FB_TimeAverage;
	Dust12Average:	FB_TimeAverage;
	Dust21Average:	FB_TimeAverage;
	Dust22Average:	FB_TimeAverage;
	DigitalDust1:			REAL;
	DigitalDust2:			REAL;
	// MQTT timer
	MQTTTimer : TON := (PT:=T#5S);
	// MQTT payload string
	sPayloadPub: STRING(255) := '';
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* convert raw Sensor values to real values *)
(* Weather Station 1 *)
WindSpeed1 := 		F_Y(Environment.rawWindSpeed1, 		0, 32767,   0.0, 50.0); // m/s
Temperature1 :=  	F_Y(Environment.rawTemperature1, 	0, 32767, -30.0, 70.0); // °C
Humidity1 :=		F_Y(Environment.rawHumidity1, 		0, 32767,   0.0, 100.0); // %
Rain1Current := 	F_Y(Environment.rawRain_analogue1,	0, 32767,	4.0, 20.0); // mA --> mm/min

Rain_analogue1 := F_RainConversion(Rain1Current);

RainAlarm1 := NOT Environment.Rain_alarm1;
RainAlarm2 := NOT Environment.Rain_alarm2;

RainTimer1(IN := RainAlarm1, PT := T#10S);
RainTimer2(IN := RainAlarm2, PT := T#10S);
RainMasterTimer(IN := RainAlarm1 AND RainAlarm2, PT := T#5S);
RainMasterAlarm := RainTimer1.Q OR RainTimer2.Q OR RainMasterTimer.Q;

WindDirection := 	F_Y(Environment.rawWindDirection,	0, 32767,   0.0, 360.0); // degrees
Pressure := 		(Environment.rawPressure / 32767.0) * 10.0 * 92.0 + 600.0; // mBar

(*  Weather Station 2 *)

WindSpeed2 := 		F_Y(Environment.rawWindSpeed2, 		0, 32767,   0.0, 50.0); // m/s
Temperature2 :=  	F_Y(Environment.rawTemperature2, 	0, 32767, -30.0, 70.0); // °C
Humidity2 :=		F_Y(Environment.rawHumidity2, 		0, 32767,   0.0, 100.0); // %
Rain2Current := 	F_Y(Environment.rawRain_analogue2,	0, 32767,	4.0, 20.0); // mA --> mm/min

Rain_analogue2 := F_RainConversion(Rain2Current);

Brightness :=		F_Y(Environment.rawBrightness, 		0, 32767,   0.0, 150000.0); // lux
IF Brightness < 1000.0 THEN 
	Brightness :=	F_Y(Environment.rawBrightnessLow, 	0, 32767,   0.000, 1000.0); // lux
END_IF

Dust := F_Y(Environment.rawDust, 0, 32767,   0.0, 0.1);

(* Indoor environment *)

Temperature_Electronics :=  F_Y(Environment.rawTemperature_Electronics, 	0, 32767, -30.0, 70.0); // °C
Humidity_Electronics :=		F_Y(Environment.rawHumidity_Electronics, 		0, 32767,   0.0, 100.0); // %
TemperatureBay :=  			F_Y(Environment.rawTemperatureBay, 				0, 32767, -30.0, 70.0); // °C
HumidityBay := 				F_Y(Environment.rawHumidityBay, 				0, 32767,   0.0, 100.0); // %
Temperature_Spec :=  		F_Y(Environment.rawTemperature_Spec, 			0, 32767, -30.0, 70.0); // °C
Humidity_Spec := 			F_Y(Environment.rawHumidity_Spec, 				0, 32767,   0.0, 100.0); // %
Windspeed_bay := 			F_Y(Environment.rawWindSpeedBay, 				0, 32767,   0.0, 40.0); // m/s
DustAvg(IN := Dust, PT := T#2M); // m^3
WindAvg1(IN := WindSpeed1, PT := T#2M, MAXAVG=> MaximumWind1);
WindAvg2(IN := WindSpeed2, PT := T#2M, MAXAVG=> MaximumWind2);
PressureAverage(IN := Pressure, PT := T#1M);

// digital dust sensor
Dust11Average(IN := 1.0 - BOOL_TO_REAL(Environment.rawDust11), PT := T#30S); 
Dust12Average(IN := 1.0 - BOOL_TO_REAL(Environment.rawDust12), PT := T#30S);
Dust21Average(IN := 1.0 - BOOL_TO_REAL(Environment.rawDust21), PT := T#30S);
Dust22Average(IN := 1.0 - BOOL_TO_REAL(Environment.rawDust22), PT := T#30S);

IF Dust11Average.MAXAVG < 1.0 AND Dust12Average.MAXAVG < 1.0 THEN
	DigitalDust1 := 10.0 * MAX(Dust11Average.AVG, Dust21Average.AVG); //mg/m³
ELSE
	DigitalDust1 := 0.0;
END_IF
IF Dust21Average.MAXAVG < 1.0 AND Dust22Average.MAXAVG < 1.0 THEN
	DigitalDust2 := 10.0 * MAX(Dust12Average.AVG, Dust22Average.AVG); //mg/m³
ELSE
	DigitalDust2 := 0.0;
END_IF

(* MQTT Section *)

MQTTTimer(IN:=TRUE);
IF MQTTTimer.Q THEN // publish new payload every second
	MQTTTimer(IN:=FALSE);
	sPayloadPub := 'environment,location=weatherstation1,host=CX-284792 ';
	sPayloadPub := APPEND(sPayloadPub, 'EnvironmentTemperature1=', LREAL_TO_FMTSTR(Temperature1, 2, TRUE));
	sPayloadPub := APPEND(sPayloadPub, ',EnvironmentHumidity1=', LREAL_TO_FMTSTR(Humidity1, 1, TRUE));		
	sPayloadPub := APPEND(sPayloadPub, ',EnvironmentRain1=', LREAL_TO_FMTSTR(Rain_analogue1, 5, TRUE));		
	sPayloadPub := APPEND(sPayloadPub, ',EnvironmentWindSpeed1=', LREAL_TO_FMTSTR(WindSpeed1, 2, TRUE));		
	sPayloadPub := APPEND(sPayloadPub, ',EnvironmentWindDirection=', LREAL_TO_FMTSTR(WindDirection, 1, TRUE));		
	sPayloadPub := APPEND(sPayloadPub, ',EnvironmentPressure=', LREAL_TO_FMTSTR(PressureAverage.AVG, 2, TRUE));		
	sPayloadPub := APPEND(sPayloadPub, ',EnvironmentRainAlarm1=', BOOL_TO_STRING(RainAlarm1));		

	IF MQTTCommunication.fbMqttClient.bConnected THEN
		MQTTCommunication.fbMqttClient.Publish(	
						sTopic:= 'STELLA/Telemetry', 
						pPayload:= ADR(sPayloadPub), 
						nPayloadSize:= LEN2(ADR(sPayloadPub)),
						eQoS:= TcIotMqttQos.AtMostOnceDelivery,
						bRetain:= FALSE, 
						bQueue:= FALSE );
	END_IF

	sPayloadPub := 'environment,location=weatherstation2,host=CX-284792 ';
	sPayloadPub := APPEND(sPayloadPub, 'EnvironmentTemperature2=', LREAL_TO_FMTSTR(Temperature2, 2, TRUE));
	sPayloadPub := APPEND(sPayloadPub, ',EnvironmentHumidity2=', LREAL_TO_FMTSTR(Humidity2, 1, TRUE));		
	sPayloadPub := APPEND(sPayloadPub, ',EnvironmentRain2=', LREAL_TO_FMTSTR(Rain_analogue2, 5, TRUE));		
	sPayloadPub := APPEND(sPayloadPub, ',EnvironmentWindSpeed2=', LREAL_TO_FMTSTR(WindSpeed2, 2, TRUE));		
	sPayloadPub := APPEND(sPayloadPub, ',EnvironmentBrightness=', LREAL_TO_FMTSTR(Brightness, 2, TRUE));		
	sPayloadPub := APPEND(sPayloadPub, ',EnvironmentDust=', LREAL_TO_FMTSTR(Dust, 5, TRUE));		
	sPayloadPub := APPEND(sPayloadPub, ',EnvironmentRainAlarm2=', BOOL_TO_STRING(RainAlarm2));		
	
	IF MQTTCommunication.fbMqttClient.bConnected THEN
		MQTTCommunication.fbMqttClient.Publish(	
						sTopic:= 'STELLA/Telemetry', 
						pPayload:= ADR(sPayloadPub), 
						nPayloadSize:= LEN2(ADR(sPayloadPub)),
						eQoS:= TcIotMqttQos.AtMostOnceDelivery,
						bRetain:= FALSE, 
						bQueue:= FALSE );
	END_IF

	sPayloadPub := 'environment,location=base,host=CX-284792 ';
	sPayloadPub := APPEND(sPayloadPub, 'ElectronicsTemperature=', LREAL_TO_FMTSTR(Temperature_Electronics, 2, TRUE));
	sPayloadPub := APPEND(sPayloadPub, ',ElectronicsHumidity=', LREAL_TO_FMTSTR(Humidity_Electronics, 2, TRUE));		
	
	IF MQTTCommunication.fbMqttClient.bConnected THEN
		MQTTCommunication.fbMqttClient.Publish(	
						sTopic:= 'STELLA/Telemetry', 
						pPayload:= ADR(sPayloadPub), 
						nPayloadSize:= LEN2(ADR(sPayloadPub)),
						eQoS:= TcIotMqttQos.AtMostOnceDelivery,
						bRetain:= FALSE, 
						bQueue:= FALSE );
	END_IF

	sPayloadPub := 'environment,location=bay,host=CX-284792 ';
	sPayloadPub := APPEND(sPayloadPub, 'BayTemperature=', LREAL_TO_FMTSTR(TemperatureBay, 2, TRUE));
	sPayloadPub := APPEND(sPayloadPub, ',BayHumidity=', LREAL_TO_FMTSTR(HumidityBay, 2, TRUE));		
	sPayloadPub := APPEND(sPayloadPub, ',BayWindSpeed=', LREAL_TO_FMTSTR(Windspeed_bay, 2, TRUE));		
	sPayloadPub := APPEND(sPayloadPub, ',EnvironmentDustDigital=', LREAL_TO_FMTSTR(DigitalDust1, 5, TRUE));		
	
	IF MQTTCommunication.fbMqttClient.bConnected THEN
		MQTTCommunication.fbMqttClient.Publish(	
						sTopic:= 'STELLA/Telemetry', 
						pPayload:= ADR(sPayloadPub), 
						nPayloadSize:= LEN2(ADR(sPayloadPub)),
						eQoS:= TcIotMqttQos.AtMostOnceDelivery,
						bRetain:= FALSE, 
						bQueue:= FALSE );
	END_IF

	sPayloadPub := 'environment,location=spectrograph,host=CX-284792 ';
	sPayloadPub := APPEND(sPayloadPub, 'SpectrographTemperature=', LREAL_TO_FMTSTR(Temperature_Spec, 2, TRUE));
	sPayloadPub := APPEND(sPayloadPub, ',SpectrographHumidity=', LREAL_TO_FMTSTR(Humidity_Spec, 2, TRUE));		
	
	IF MQTTCommunication.fbMqttClient.bConnected THEN
		MQTTCommunication.fbMqttClient.Publish(	
						sTopic:= 'STELLA/Telemetry', 
						pPayload:= ADR(sPayloadPub), 
						nPayloadSize:= LEN2(ADR(sPayloadPub)),
						eQoS:= TcIotMqttQos.AtMostOnceDelivery,
						bRetain:= FALSE, 
						bQueue:= FALSE );
	END_IF

	
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="ConvertEnvironment">
      <LineId Id="707" Count="5" />
      <LineId Id="877" Count="0" />
      <LineId Id="876" Count="0" />
      <LineId Id="722" Count="17" />
      <LineId Id="874" Count="1" />
      <LineId Id="748" Count="4" />
      <LineId Id="889" Count="1" />
      <LineId Id="753" Count="12" />
      <LineId Id="892" Count="0" />
      <LineId Id="766" Count="5" />
      <LineId Id="882" Count="0" />
      <LineId Id="878" Count="0" />
      <LineId Id="881" Count="0" />
      <LineId Id="885" Count="1" />
      <LineId Id="880" Count="0" />
      <LineId Id="883" Count="0" />
      <LineId Id="773" Count="0" />
      <LineId Id="887" Count="1" />
      <LineId Id="884" Count="0" />
      <LineId Id="775" Count="12" />
      <LineId Id="789" Count="48" />
      <LineId Id="866" Count="0" />
      <LineId Id="838" Count="26" />
      <LineId Id="146" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>