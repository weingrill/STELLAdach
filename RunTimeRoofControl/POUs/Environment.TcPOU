<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="Environment" Id="{03869fa8-1755-402e-a7ee-189c483e0438}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Environment
VAR
	LightDirection:	REAL;
	Brightness1:	REAL;
	WindSpeed1:		REAL;
	Temperature1:	REAL;
	Humidity1:		REAL;
	Rain_analogue1:	REAL;
	WindDirection:	REAL;
	Pressure0, Pressure:		REAL;
	
	WindSpeed2:		REAL;
	Temperature2:	REAL;
	Humidity2:		REAL;
	Brightness2:		REAL;
	WindSpeed:		REAL;
	Humidity:		REAL;
	// electronics room temperature
	Temperature_Electronics:	REAL;
	// electronics room humidity
	Humidity_Electronics:		REAL;
	// telescope bay temperature
	TemperatureBay:	REAL;
	// telescope bay humidity
	HumidityBay:	REAL;
	// SES Spectrograph temperature
	Temperature_Spec:	REAL;
	// SES spectrograph humidity
	Humidity_Spec:		REAL;
	// wind speed at bay
	Windspeed_bay:		REAL;
	// old pressure sensor from weather station 1 (West)
	Pressure_bay:		REAL;
	// analog dust sensor
	
	Dust:				REAL;
	// digital rain sensor
	RainAlarm1:			BOOL;
	// digital rain sensor
	RainAlarm2:			BOOL;
	// combination of rain sensors
	RainMasterAlarm:	BOOL;
	// delay timer for digital rain signal 1
	RainTimer1:			TON;
	// delay timer for digital rain signal 2
	RainTimer2:			TON;
	// delay timer for combined rain signals
	RainMasterTimer:	TON;
	Humidity1_brokendelay:	TON := (PT := T#60S);
	Humidity2_brokendelay:	TON := (PT := T#60S);
	Wind1_brokendelay:	TON := (PT := T#60S);
	Wind2_brokendelay:	TON := (PT := T#60S);
	// maximum wind speed 1
	MaximumWind1: REAL;
	MaximumWind2: REAL;
	DustAvg:	FB_TimeAverage;
	WindAvg1:	FB_TimeAverage; 
	Windavg2:	FB_TimeAverage;
	PressureAverage:	FB_TimeAverage;
	
	DigitalDust1:	FB_Dust;
	DigitalDust2:	FB_Dust;
	ElectronicsTemperatureTrigger:	SR;
	ElectronicsHumidityTrigger:		SR;
	SpectrographTemperatureTrigger:	SR;
	SpectrographHumidityTrigger:	SR;
	EnvironmentHumidityTrigger:		SR;
	BayHumidityTrigger:				SR;
	BayHumidityCriticalTrigger:		SR;
	DustTrigger:					SR;
	Rainanalogue1brokenTrigger:		SR;
	Rainanalogue2brokenTrigger:		SR;
	// MQTT timer
	MQTTTimer : TON := (PT:=T#5S);
END_VAR
VAR_OUTPUT
	Rain_analogue1_broken:	BOOL;
	Rain_analogue2_broken:	BOOL;
	Humidity1_broken:		BOOL;
	Humidity2_broken:		BOOL;
	Wind1_broken:			BOOL;
	Wind2_broken:			BOOL;
	Dust_broken:			BOOL;
END_VAR
VAR CONSTANT
	h:	REAL := 2390.0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* convert raw Sensor values to real values *)
(* Weather Station 1 *)
LightDirection := 	F_Y(GVL_Environment.rawLightDirection,	0, 32767,	0.0, 360.0); // degrees
Brightness1 := 		F_Y(GVL_Environment.rawBrightness,		0, 32767,	0.0, 120000.0); // Lux
Pressure0 := 		F_Y(GVL_Environment.rawPressure,		0, 32767,	800.0, 1020.0); // hPa
Humidity1 :=		F_Y(GVL_Environment.rawHumidity1, 		0, 32767,   0.0, 100.0); // %
Temperature1 :=  	F_Y(GVL_Environment.rawTemperature1, 	0, 32767, -40.0, 60.0); // °C
Rain_analogue1 := 	F_Y(GVL_Environment.rawRain_analogue1,	0, 32767,	0.0, 100.0); // mm/h
WindDirection := 	F_Y(GVL_Environment.rawWindDirection,	0, 32767,   0.0, 360.0); // degrees
WindSpeed1 := 		F_Y(GVL_Environment.rawWindSpeed1, 		0, 32767,   0.0, 60.0); // m/s

Pressure := LREAL_TO_REAL(Pressure0 * EXPT(1.0 - (0.0065*h/(Temperature1+273.15)) , 5.255));

RainAlarm1 := Rain_analogue1 > 0.1;
RainAlarm2 := NOT GVL_Environment.Rain_alarm2;

RainTimer1(IN := RainAlarm1, PT := T#30S);
RainTimer2(IN := RainAlarm2, PT := T#30S);
RainMasterTimer(IN := RainAlarm1 AND RainAlarm2, PT := T#5S);
RainMasterAlarm := RainTimer1.Q OR RainTimer2.Q OR RainMasterTimer.Q;


(*  Weather Station 2 *)

WindSpeed2 := 		F_Y(GVL_Environment.rawWindSpeed2, 		0, 32767,   0.0, 50.0); // m/s
Temperature2 :=  	F_Y(GVL_Environment.rawTemperature2, 	0, 32767, -30.0, 70.0); // °C
Humidity2 :=		F_Y(GVL_Environment.rawHumidity2, 		0, 32767,   0.0, 100.0); // %

Brightness2 :=		F_Y(GVL_Environment.rawBrightness, 		0, 32767,   0.0, 150000.0); // lux
IF Brightness2 < 1000.0 THEN 
	Brightness2 :=	F_Y(GVL_Environment.rawBrightnessLow, 	0, 32767,   0.000, 1000.0); // lux
END_IF


(* Indoor environment *)

Temperature_Electronics :=  F_Y(GVL_Environment.rawTemperature_Electronics, 	0, 32767, -30.0, 70.0); // °C
Humidity_Electronics :=		F_Y(GVL_Environment.rawHumidity_Electronics, 		0, 32767,   0.0, 100.0); // %
TemperatureBay :=  			F_Y(GVL_Environment.rawTemperatureBay, 				0, 32767, -30.0, 70.0); // °C
HumidityBay := 				F_Y(GVL_Environment.rawHumidityBay, 				0, 32767,   0.0, 100.0); // %
Temperature_Spec :=  		F_Y(GVL_Environment.rawTemperature_Spec, 			0, 32767, -30.0, 70.0); // °C
Humidity_Spec := 			F_Y(GVL_Environment.rawHumidity_Spec, 				0, 32767,   0.0, 100.0); // %
Windspeed_bay := 			F_Y(GVL_Environment.rawWindSpeedBay, 				0, 32767,   0.0, 40.0); // m/s
Pressure_bay := 			F_Y(GVL_Environment.rawPressureBay,					0, 16383,	600.0, 1060.0); // hPa 0..5V -> 600...1060hPa

WindAvg1(IN := WindSpeed1, PT := T#2M, MAXAVG=> MaximumWind1);
WindAvg2(IN := WindSpeed2, PT := T#2M, MAXAVG=> MaximumWind2);
PressureAverage(IN := Pressure, PT := T#1M);
WindSpeed := MAX(WindSpeed1, WindSpeed2);
Humidity := MAX(Humidity1, Humidity2);

ElectronicsTemperatureTrigger(SET1 := Temperature_Electronics >= 30.0, RESET := Temperature_Electronics < 25.0);
SpectrographTemperatureTrigger(SET1 := Temperature_Spec >= 30.0, RESET := Temperature_Spec < 25.0);
ElectronicsHumidityTrigger(SET1 := Humidity_Electronics >= 65.0, RESET := Humidity_Electronics < 50.0);
SpectrographHumidityTrigger(SET1 := Humidity_Spec >= 65.0, RESET := Humidity_Spec < 50.0);
EnvironmentHumidityTrigger(SET1 := Humidity >= MAIN.HumidityLimitHigh, RESET := HumidityBay < MAIN.HumidityLimitLow);
BayHumidityTrigger(SET1 := HumidityBay >= MAIN.HumidityLimitHigh, RESET := HumidityBay < MAIN.HumidityLimitLow);
BayHumidityCriticalTrigger(SET1 := HumidityBay >= MAIN.HumidityLimitCritical, RESET := HumidityBay < MAIN.HumidityLimitHigh);

Rainanalogue1brokenTrigger( SET1:= RainMasterAlarm AND Rain_analogue1 < 1E-3, RESET := Rain_analogue1 > 1E-2);
Humidity1_brokendelay(IN := Humidity > 10.0 AND Humidity1 < 0.5 * Humidity);
Humidity2_brokendelay(IN := Humidity > 10.0 AND Humidity2 < 0.5 * Humidity);
Humidity1_broken:= Humidity1_brokendelay.Q;
Humidity2_broken:= Humidity2_brokendelay.Q;
Wind1_brokendelay(IN := WindSpeed1 < 0.5 * WindSpeed);
Wind1_broken:= Wind1_brokendelay.Q;
Wind2_brokendelay(IN := WindSpeed2 < 0.5 * WindSpeed);
Wind2_broken:= Wind2_brokendelay.Q;

(*** Dust section ***)
// digital dust sensors
DigitalDust1(pwm1 := GVL_Environment.rawDust11, pwm2 := GVL_Environment.rawDust12);
DigitalDust2(pwm1 := GVL_Environment.rawDust21, pwm2 := GVL_Environment.rawDust22);

Dust_broken := (GVL_Environment.rawDust = 0) OR (GVL_Environment.rawDust >= 32000);
Dust := F_Y(GVL_Environment.rawDust, 0, 32767,   0.0, 0.1);
IF Dust_broken THEN
	Dust := DigitalDust2.concentration2 / 1000.0;
END_IF
DustAvg(IN := Dust, PT := T#2M); // m^3
DustTrigger( SET1 := DustAvg.AVG > 0.01, RESET := DustAvg.AVG < 0.0075);

(* MQTT Section *)

MQTTTimer(IN:=TRUE);
IF MQTTTimer.Q THEN // publish new payload every second
	
	MAIN.MQTTClient.Publish('environment', 'weatherstation1', 'EnvironmentLightDirection',	LREAL_TO_FMTSTR(LightDirection, 2, TRUE));
	MAIN.MQTTClient.Publish('environment', 'weatherstation1', 'EnvironmentBrightness1',		LREAL_TO_FMTSTR(Brightness1, 2, TRUE));		
	MAIN.MQTTClient.Publish('environment', 'weatherstation1', 'EnvironmentWindSpeed1',		LREAL_TO_FMTSTR(WindSpeed1, 2, TRUE));		
	MAIN.MQTTClient.Publish('environment', 'weatherstation1', 'EnvironmentTemperature1',	LREAL_TO_FMTSTR(Temperature1, 2, TRUE));
	MAIN.MQTTClient.Publish('environment', 'weatherstation1', 'EnvironmentHumidity1',		LREAL_TO_FMTSTR(Humidity1, 2, TRUE));		
	MAIN.MQTTClient.Publish('environment', 'weatherstation1', 'EnvironmentRain1',			LREAL_TO_FMTSTR(Rain_analogue1, 5, TRUE));		
	MAIN.MQTTClient.Publish('environment', 'weatherstation1', 'EnvironmentWindDirection',	LREAL_TO_FMTSTR(WindDirection, 1, TRUE));		
	MAIN.MQTTClient.Publish('environment', 'weatherstation1', 'EnvironmentPressure',		LREAL_TO_FMTSTR(PressureAverage.AVG, 2, TRUE));		
	MAIN.MQTTClient.Publish('environment', 'weatherstation1', 'EnvironmentRainAlarm1',		BOOL_TO_STRING(RainAlarm1));		
	
	MAIN.MQTTClient.Publish('environment', 'weatherstation2', 'EnvironmentTemperature2',LREAL_TO_FMTSTR(Temperature2, 2, TRUE));
	MAIN.MQTTClient.Publish('environment', 'weatherstation2', 'EnvironmentHumidity2', 	LREAL_TO_FMTSTR(Humidity2, 2, TRUE));		
	MAIN.MQTTClient.Publish('environment', 'weatherstation2', 'EnvironmentWindSpeed2', 	LREAL_TO_FMTSTR(WindSpeed2, 2, TRUE));		
	MAIN.MQTTClient.Publish('environment', 'weatherstation2', 'EnvironmentBrightness2',	LREAL_TO_FMTSTR(Brightness2, 2, TRUE));		
	MAIN.MQTTClient.Publish('environment', 'weatherstation2', 'EnvironmentDust',		LREAL_TO_FMTSTR(Dust, 5, TRUE));		
	MAIN.MQTTClient.Publish('environment', 'weatherstation2', 'EnvironmentRainAlarm2',	BOOL_TO_STRING(RainAlarm2));		
	
	MAIN.MQTTClient.Publish('environment', 'base', 'ElectronicsTemperature',	LREAL_TO_FMTSTR(Temperature_Electronics, 2, TRUE));
	MAIN.MQTTClient.Publish('environment', 'base', 'ElectronicsHumidity',		LREAL_TO_FMTSTR(Humidity_Electronics, 2, TRUE));		
	
	MAIN.MQTTClient.Publish('environment', 'bay', 'BayTemperature',	LREAL_TO_FMTSTR(TemperatureBay, 2, TRUE));
	MAIN.MQTTClient.Publish('environment', 'bay', 'BayHumidity',	LREAL_TO_FMTSTR(HumidityBay, 2, TRUE));		
	MAIN.MQTTClient.Publish('environment', 'bay', 'BayWindSpeed',	LREAL_TO_FMTSTR(Windspeed_bay, 2, TRUE));		
	MAIN.MQTTClient.Publish('environment', 'bay', 'BayPressure',	LREAL_TO_FMTSTR(Pressure_bay, 2, TRUE));		
	
	MAIN.MQTTClient.Publish('environment', 'weatherstation', 'EnvironmentDustPM1',	LREAL_TO_FMTSTR(DigitalDust1.concentration1 / 1000.0, 5, TRUE));		
	MAIN.MQTTClient.Publish('environment', 'weatherstation', 'EnvironmentDustPM25',	LREAL_TO_FMTSTR(DigitalDust1.concentration2 / 1000.0, 5, TRUE));		
	
	MAIN.MQTTClient.Publish('environment', 'bay', 'EnvironmentDust2PM1',	LREAL_TO_FMTSTR(DigitalDust2.concentration1 / 1000.0, 5, TRUE));		
	MAIN.MQTTClient.Publish('environment', 'bay', 'EnvironmentDust2PM25',	LREAL_TO_FMTSTR(DigitalDust2.concentration2 / 1000.0, 5, TRUE));		
	
	MAIN.MQTTClient.Publish('environment', 'spectrograph', 'SpectrographTemperature',	LREAL_TO_FMTSTR(Temperature_Spec, 2, TRUE));
	MAIN.MQTTClient.Publish('environment', 'spectrograph', 'SpectrographHumidity',		LREAL_TO_FMTSTR(Humidity_Spec, 2, TRUE));		
	MQTTTimer(IN:=FALSE);	
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="Environment">
      <LineId Id="707" Count="1" />
      <LineId Id="1497" Count="1" />
      <LineId Id="1500" Count="4" />
      <LineId Id="709" Count="0" />
      <LineId Id="1517" Count="1" />
      <LineId Id="877" Count="0" />
      <LineId Id="723" Count="7" />
      <LineId Id="733" Count="5" />
      <LineId Id="748" Count="4" />
      <LineId Id="889" Count="0" />
      <LineId Id="753" Count="9" />
      <LineId Id="1510" Count="0" />
      <LineId Id="1509" Count="0" />
      <LineId Id="764" Count="1" />
      <LineId Id="892" Count="0" />
      <LineId Id="1028" Count="0" />
      <LineId Id="766" Count="0" />
      <LineId Id="1033" Count="0" />
      <LineId Id="882" Count="0" />
      <LineId Id="1034" Count="0" />
      <LineId Id="1036" Count="1" />
      <LineId Id="1415" Count="0" />
      <LineId Id="1306" Count="1" />
      <LineId Id="1314" Count="0" />
      <LineId Id="1320" Count="0" />
      <LineId Id="1526" Count="1" />
      <LineId Id="1322" Count="1" />
      <LineId Id="1528" Count="0" />
      <LineId Id="1324" Count="0" />
      <LineId Id="1529" Count="0" />
      <LineId Id="1325" Count="0" />
      <LineId Id="1329" Count="0" />
      <LineId Id="1327" Count="0" />
      <LineId Id="1331" Count="3" />
      <LineId Id="1237" Count="0" />
      <LineId Id="1337" Count="0" />
      <LineId Id="1315" Count="0" />
      <LineId Id="1318" Count="1" />
      <LineId Id="1336" Count="0" />
      <LineId Id="1326" Count="0" />
      <LineId Id="1330" Count="0" />
      <LineId Id="776" Count="5" />
      <LineId Id="1514" Count="2" />
      <LineId Id="783" Count="2" />
      <LineId Id="787" Count="0" />
      <LineId Id="789" Count="0" />
      <LineId Id="1513" Count="0" />
      <LineId Id="799" Count="0" />
      <LineId Id="803" Count="1" />
      <LineId Id="806" Count="3" />
      <LineId Id="818" Count="0" />
      <LineId Id="822" Count="1" />
      <LineId Id="834" Count="0" />
      <LineId Id="836" Count="1" />
      <LineId Id="897" Count="0" />
      <LineId Id="1511" Count="0" />
      <LineId Id="1025" Count="0" />
      <LineId Id="898" Count="0" />
      <LineId Id="961" Count="0" />
      <LineId Id="1026" Count="0" />
      <LineId Id="962" Count="0" />
      <LineId Id="838" Count="0" />
      <LineId Id="848" Count="0" />
      <LineId Id="851" Count="1" />
      <LineId Id="864" Count="0" />
      <LineId Id="146" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>