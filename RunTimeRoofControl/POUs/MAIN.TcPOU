<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="MAIN" Id="{a96e5090-a34b-4fcc-a0b3-91ecf58e0624}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR_INPUT
	// open the roof remotely
	OpenRoofAuto: 	BOOL;
	// close the roof remotely
	CloseRoofAuto: 	BOOL;
	// stop the roof remotely (unused?)
	StopRoofAuto: 	BOOL;
	// turn on the light remotely
	LightAuto: 		BOOL;
END_VAR

VAR
	// RoofManual or RoofAutomatic
	nMode:		    E_RoofMode;
	// DachControl roof1
	Dach1Control:	FB_RoofControl;
	// DachControl roof 2
	Dach2Control:	FB_RoofControl;
	Roof1Command,
	Roof2Command:	E_RoofCommand;
	Roof1Status,
	Roof2Status,
	LastRoof1Status,
	LastRoof2Status:	E_RoofStatus;
	RSOpenRoof1,
	RSCloseRoof1,
	RSOpenRoof2,
	RSCloseRoof2: 	RS;
	OpenRoofAutoPending: BOOL;
	OpenRoof1,
	CloseRoof1,
	OpenRoof2,
	CloseRoof2,
	StopRoof1,
	StopRoof2:	BOOL;
	// report manual operation of the dome to TCS
	isRoofManual: BOOL;
	// indicates an error in the dust sensor
	DustSensorError: BOOL;
	// Timer for Dome Light
	LightTimer:		LIGHT_BUTTON;

	RoofStatusLamp1,
	RoofStatusLamp2: FB_StatusLamp;
	WeatherAlarm,
	MotionAlarm1,
	MotionAlarm2:	BOOL;
	// indicates at least on environment signal is bad
	EnvironmentBad,
	// environment signal is bad for n seconds
	EnvironmentAlarm: BOOL;
	// time function block for Environment signal
	EnvironmentBadTimer: TON;
	MQTTTimer : TON := (PT:=T#5S);
	// MQTT class for publishing
	MQTTClient:		FB_MQTTCommunication;
	// Humidity Trigger
	HumidityTrigger:	SR;
	Roof1OpenTimer,
	Roof2OpenTimer,
	Roof1CloseTimer,
	Roof2CloseTimer:	TIMER;
	Roof1OpenTimeOut,
	Roof2OpenTimeOut,
	Roof1CloseTimeOut,
	Roof2CloseTimeOut:	TON;
	Roof1LockTimeOut,
	Roof2LockTimeOut,
	Roof1UnlockTimeOut,
	Roof2UnlockTimeOut:	TON;
END_VAR
VAR CONSTANT
	HumidityLimitHigh:		REAL := 80.0;
	HumidityLimitLow:		REAL := 65.0;
	
	WindSpeedLimit:		REAL := 20.0;
	WindSpeedBayLimit:	REAL :=	15.0;
	DustLimit:			REAL := 0.01;
	BrightnessLimit:	REAL := 40000.0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF GVL_Panel.IManualSwitch THEN
	nMode := RoofManual;
ELSE
	nMode := RoofAutomatic;
END_IF
isRoofManual := GVL_Panel.IManualSwitch;

DustSensorError := GVL_Environment.DustSensorError;

// initialize MQTT Communication
MQTTClient();

// collect weather data
Environment();

// Handle Auxiliary inputs and outputs
Auxiliary();

// Handle Logging
Logging();

// Control Logic for Dehumidifier
DehumidifierControl(Enable := nMode = RoofAutomatic AND Roof1Status = StatusLocked AND Roof2Status = StatusLocked);

HumidityTrigger(SET1 := Environment.Humidity >= HumidityLimitHigh,
				RESET := Environment.Humidity < HumidityLimitLow);
						
// define bad weather condition; rain is handled in EnvironmentAlarm
EnvironmentBad := (Environment.DustTrigger.Q1 AND NOT DustSensorError) OR
		HumidityTrigger.Q1 OR
		Environment.WindSpeed1 > WindSpeedLimit OR
		Environment.WindSpeed2 > WindSpeedLimit OR
		Environment.Windspeed_bay > WindSpeedBayLimit; // OR
		//ConvertEnvironment.Brightness > BrightnessLimit;

EnvironmentBadTimer(IN := EnvironmentBad,
					PT := T#125S);
					
EnvironmentAlarm := EnvironmentBadTimer.Q OR Environment.RainMasterAlarm;

IF nMode = RoofAutomatic THEN
	// if we get the open comand during bad weather, postpone the signal
	IF OpenRoofAuto AND EnvironmentAlarm THEN
		OpenRoofAutoPending := TRUE;
		OpenRoofAuto := FALSE;
	// if we get the close command cancle the signal
	ELSIF CloseRoofAuto THEN
		OpenRoofAutoPending := FALSE;
	END_IF
	// if weather is good, execute the pending signal
	IF NOT EnvironmentAlarm AND OpenRoofAutoPending THEN
		OpenRoofAuto := TRUE;
		OpenRoofAutoPending := FALSE;
	END_IF			
	
	IF CloseRoofAuto THEN
		OpenRoofAuto := FALSE;
		Roof1Command := CloseRoof;
		Roof2Command := CloseRoof;
	ELSIF OpenRoofAuto THEN
		CloseRoofAuto := FALSE;
		Roof1Command := OpenRoof;
		Roof2Command := OpenRoof;
	ELSE
		Roof1Command := StopRoof;
		Roof2Command := StopRoof;
	END_IF

	// overwrite previous command if the weather is bad for xx seconds
	IF EnvironmentAlarm THEN
		IF NOT (Roof1Status = StatusLocked) THEN
			Roof1Command := CloseRoof;	
		END_IF
		IF NOT (Roof2Status = StatusLocked) THEN
			Roof2Command := CloseRoof;	
		END_IF
	END_IF
	
	IF (Roof1Status = StatusLocked) AND (Roof2Status = StatusLocked) THEN
		CloseRoofAuto := FALSE;
	END_IF			
	IF (Roof1Status = StatusOpened) AND (Roof2Status = StatusOpened) THEN
		OpenRoofAuto := FALSE;
	END_IF			
	
ELSE //	RoofManual
	OpenRoof1 := GVL_Panel.ILeftOpenSwitch AND NOT GVL_Panel.ILeftCloseSwitch;
	CloseRoof1 := GVL_Panel.ILeftCloseSwitch AND NOT GVL_Panel.ILeftOpenSwitch;
	StopRoof1 := NOT (GVL_Panel.ILeftOpenSwitch XOR GVL_Panel.ILeftCloseSwitch);
	
	IF CloseRoof1 THEN
		Roof1Command := CloseRoof;
	ELSIF OpenRoof1 THEN
		Roof1Command := OpenRoof;
	ELSE
		Roof1Command := StopRoof;
	END_IF

	OpenRoof2 := GVL_Panel.IRightOpenSwitch AND NOT GVL_Panel.IRightCloseSwitch;
	CloseRoof2 := GVL_Panel.IRightCloseSwitch AND NOT GVL_Panel.IRightOpenSwitch;
	StopRoof2 := NOT (GVL_Panel.IRightOpenSwitch XOR GVL_Panel.IRightCloseSwitch);
	
	IF CloseRoof2 THEN
		Roof2Command := CloseRoof;
	ELSIF OpenRoof2 THEN
		Roof2Command := OpenRoof;
	ELSE
		Roof2Command := StopRoof;
	END_IF
	Weatheralarm := ((Roof1Status = StatusOpened) OR (Roof2Status = StatusOpened))
					AND EnvironmentAlarm;
		
END_IF

Roof1OpenTimer(bStart := (Roof1Command = OpenRoof) AND NOT (Roof1Status = StatusOpened));
Roof2OpenTimer(bStart := (Roof2Command = OpenRoof) AND NOT (Roof2Status = StatusOpened));
Roof1CloseTimer(bStart := (Roof1Command = CloseRoof) AND NOT (Roof1Status = StatusLocked));
Roof2CloseTimer(bStart := (Roof2Command = CloseRoof) AND NOT (Roof2Status = StatusLocked));

Roof1OpenTimeOut(IN := (Roof1Command = OpenRoof) AND NOT (Roof1Status = StatusOpened), PT := T#130S);
Roof2OpenTimeOut(IN := (Roof2Command = OpenRoof) AND NOT (Roof2Status = StatusOpened), PT := T#130S);
Roof1CloseTimeOut(IN := (Roof1Command = CloseRoof) AND NOT (Roof1Status = StatusLocked), PT := T#130S);
Roof2CloseTimeOut(IN := (Roof1Command = CloseRoof) AND NOT (Roof2Status = StatusLocked), PT := T#130S);

Roof1LockTimeOut(IN := (GVL_Roof.ORiegel11zu OR GVL_Roof.ORiegel21zu) AND NOT (GVL_Roof.IRiegel11zu OR GVL_Roof.IRiegel21zu), PT := T#10S);
Roof2LockTimeOut(IN := (GVL_Roof.ORiegel12zu OR GVL_Roof.ORiegel22zu) AND NOT (GVL_Roof.IRiegel12zu OR GVL_Roof.IRiegel22zu), PT := T#10S);

Roof1UnlockTimeOut(IN := (GVL_Roof.ORiegel11auf OR GVL_Roof.ORiegel21auf) AND NOT (GVL_Roof.IRiegel11auf OR GVL_Roof.IRiegel21auf), PT := T#10S);
Roof2UnlockTimeOut(IN := (GVL_Roof.ORiegel12auf OR GVL_Roof.ORiegel22auf) AND NOT (GVL_Roof.IRiegel12auf OR GVL_Roof.IRiegel22auf), PT := T#10S);

	
// disable light after 1 hour if on automatic
LightTimer( IN := nMode = RoofAutomatic AND (LightAuto OR GVL_Environment.LightSwitch),
			PT := T#1H);
			
GVL_Environment.LightBay := LightTimer.Q OR (nMode = RoofManual AND GVL_Environment.LightSwitch);	
// reset LightAuto SIgnal after one hour
//IF nMode = RoofAutomatic AND LightAuto AND NOT LightTimer.Q1 THEN
//	LightAuto := FALSE;
//END_IF

(*** Control Section ***)	

Dach1Control(   cmdRoofCommand := Roof1Command,
				bOpenSwitch1   := GVL_Roof.IDach1auf,
				bOpenSwitch2   := GVL_Roof.IDach1auf2,
				bClosedSwitch1 := GVL_Roof.IDach1zu,
				bClosedSwitch2 := GVL_Roof.IDach1zu2,
				bLocked1       := GVL_Roof.IRiegel11zu,
				bUnlocked1     := GVL_Roof.IRiegel11auf,
				bLocked2       := GVL_Roof.IRiegel21zu,
				bUnlocked2     := GVL_Roof.IRiegel21auf,
				bFastSwitch    := GVL_Roof.IDach1Schnell,
				bOpenLock1     => GVL_Roof.ORiegel11auf,
				bCloseLock1    => GVL_Roof.ORiegel11zu,
				bOpenLock2     => GVL_Roof.ORiegel21auf,
				bCloseLock2    => GVL_Roof.ORiegel21zu,
				bRoofOpen 	   => GVL_Roof.ODach1auf,
				bRoofClose     => GVL_Roof.ODach1zu,
				bMotorFast     => GVL_Roof.ODach1Schnell,
				RoofStatus     => Roof1Status,
				MotionAlarm    => MotionAlarm1);

Dach2Control(   cmdRoofCommand := Roof2Command,
				bOpenSwitch1   := GVL_Roof.IDach2auf,
				bOpenSwitch2   := GVL_Roof.IDach2auf2,
				bClosedSwitch1 := GVL_Roof.IDach2zu,
				bClosedSwitch2 := GVL_Roof.IDach2zu2,
				bLocked1       := GVL_Roof.IRiegel12zu,
				bUnlocked1     := GVL_Roof.IRiegel12auf,
				bLocked2       := GVL_Roof.IRiegel22zu,
				bUnlocked2     := GVL_Roof.IRiegel22auf,
				bFastSwitch    := GVL_Roof.IDach2Schnell,
				bOpenLock1     => GVL_Roof.ORiegel12auf,
				bCloseLock1    => GVL_Roof.ORiegel12zu,
				bOpenLock2     => GVL_Roof.ORiegel22auf,
				bCloseLock2    => GVL_Roof.ORiegel22zu,
				bRoofOpen      => GVL_Roof.ODach2auf,
				bRoofClose     => GVL_Roof.ODach2zu,
				bMotorFast     => GVL_Roof.ODach2Schnell,
				RoofStatus     => Roof2Status,
				MotionAlarm    => MotionAlarm2);


// Set status lamps
RoofStatusLamp1(RoofStatus := Roof1Status, RoofLamp => GVL_Panel.Roof1Lamp);
RoofStatusLamp2(RoofStatus := Roof2Status, RoofLamp => GVL_Panel.Roof2Lamp);
			
// sound horn
GVL_Environment.Horn := WeatherAlarm OR MotionAlarm1 OR MotionAlarm2;		

IF GVL_Panel.Us_Undervoltage OR GVL_Panel.Up_Undervoltage THEN
	Roof1Status := StatusError;
	Roof2Status := StatusError;
END_IF


(*** MQTT Section ***)
MQTTTimer(IN:=TRUE);
IF MQTTTimer.Q OR Roof1Status <> LastRoof1Status OR Roof2Status <> LastRoof2Status THEN
	MQTTClient.Publish('roof', 'roof1', 'Roof1Status', RoofStatus_TO_String(Roof1Status, Quoted := TRUE));
	MQTTClient.Publish('roof', 'roof2', 'Roof2Status', RoofStatus_TO_String(Roof2Status, Quoted := TRUE));
	MAIN.MQTTClient.Publish('environment', 'weatherstation', 'WeatherBad',	BOOL_TO_STRING(EnvironmentAlarm));		
	MAIN.MQTTClient.Publish('roof', 'main', 'isRoofManual',	BOOL_TO_STRING(isRoofManual));		
	
	MQTTTimer(IN:=FALSE);
	LastRoof1Status := Roof1Status;
	LastRoof2Status := Roof2Status;
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="10" Count="4" />
      <LineId Id="601" Count="0" />
      <LineId Id="952" Count="0" />
      <LineId Id="870" Count="0" />
      <LineId Id="953" Count="0" />
      <LineId Id="781" Count="0" />
      <LineId Id="603" Count="0" />
      <LineId Id="783" Count="0" />
      <LineId Id="785" Count="0" />
      <LineId Id="784" Count="0" />
      <LineId Id="798" Count="2" />
      <LineId Id="1207" Count="2" />
      <LineId Id="1035" Count="2" />
      <LineId Id="1216" Count="3" />
      <LineId Id="211" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="1220" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="218" Count="1" />
      <LineId Id="605" Count="0" />
      <LineId Id="531" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="797" Count="0" />
      <LineId Id="796" Count="0" />
      <LineId Id="1333" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="1347" Count="0" />
      <LineId Id="1340" Count="1" />
      <LineId Id="1349" Count="0" />
      <LineId Id="1348" Count="0" />
      <LineId Id="1343" Count="1" />
      <LineId Id="1342" Count="0" />
      <LineId Id="1350" Count="0" />
      <LineId Id="1334" Count="0" />
      <LineId Id="1346" Count="0" />
      <LineId Id="1354" Count="0" />
      <LineId Id="1336" Count="0" />
      <LineId Id="1443" Count="1" />
      <LineId Id="1447" Count="0" />
      <LineId Id="1445" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="1448" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="38" Count="3" />
      <LineId Id="539" Count="0" />
      <LineId Id="534" Count="0" />
      <LineId Id="533" Count="0" />
      <LineId Id="1231" Count="5" />
      <LineId Id="536" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="1453" Count="0" />
      <LineId Id="1455" Count="0" />
      <LineId Id="1454" Count="0" />
      <LineId Id="1457" Count="2" />
      <LineId Id="1456" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="769" Count="3" />
      <LineId Id="1449" Count="1" />
      <LineId Id="64" Count="1" />
      <LineId Id="68" Count="2" />
      <LineId Id="777" Count="3" />
      <LineId Id="71" Count="0" />
      <LineId Id="1451" Count="1" />
      <LineId Id="72" Count="1" />
      <LineId Id="76" Count="3" />
      <LineId Id="88" Count="2" />
      <LineId Id="1227" Count="1" />
      <LineId Id="1230" Count="0" />
      <LineId Id="1239" Count="1" />
      <LineId Id="1250" Count="2" />
      <LineId Id="768" Count="0" />
      <LineId Id="1255" Count="0" />
      <LineId Id="1436" Count="0" />
      <LineId Id="1254" Count="0" />
      <LineId Id="1438" Count="3" />
      <LineId Id="1437" Count="0" />
      <LineId Id="1253" Count="0" />
      <LineId Id="91" Count="2" />
      <LineId Id="1431" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="1221" Count="0" />
      <LineId Id="1213" Count="0" />
      <LineId Id="1222" Count="2" />
      <LineId Id="97" Count="41" />
      <LineId Id="786" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="400" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="1241" Count="1" />
      <LineId Id="1245" Count="0" />
      <LineId Id="1243" Count="1" />
      <LineId Id="766" Count="0" />
      <LineId Id="765" Count="0" />
      <LineId Id="737" Count="0" />
      <LineId Id="1206" Count="0" />
      <LineId Id="738" Count="1" />
      <LineId Id="741" Count="0" />
      <LineId Id="1351" Count="0" />
      <LineId Id="1353" Count="0" />
      <LineId Id="1352" Count="0" />
      <LineId Id="748" Count="1" />
      <LineId Id="1122" Count="0" />
      <LineId Id="750" Count="0" />
      <LineId Id="1121" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>