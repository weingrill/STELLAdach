<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="MAIN" Id="{a96e5090-a34b-4fcc-a0b3-91ecf58e0624}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR_INPUT
	// open the roof remotely
	OpenRoofAuto: 	BOOL;
	// close the roof remotely
	CloseRoofAuto: 	BOOL;
	// stop the roof remotely (unused?)
	StopRoofAuto: 	BOOL;
	// turn on the light remotely
	LightAuto: 		BOOL;
END_VAR

VAR
	// RoofManual or RoofAutomatic
	nMode:		    E_RoofMode;
	// DachControl roof1
	Dach1Control:	FB_RoofControl;
	// DachControl roof 2
	Dach2Control:	FB_RoofControl;
	Roof1Command,
	Roof2Command:	E_RoofCommand;
	Roof1Status,
	Roof2Status,
	LastRoof1Status,
	LastRoof2Status:	E_RoofStatus;
	RSOpenRoof1,
	RSCloseRoof1,
	RSOpenRoof2,
	RSCloseRoof2: 	RS;
	OpenRoof1,
	CloseRoof1,
	OpenRoof2,
	CloseRoof2,
	StopRoof1,
	StopRoof2:	BOOL;
	// report manual operation of the dome to TCS
	isRoofManual: BOOL;
	// Timer for Dome Light
	LightTimer:		TP;
	// Logging voriables
	EnvironmentLog,
	DustLog,
	HumidityLog1,
	HumidityLog2,
	HumidityBayLog,
	WindSpeed1Log,
	WindSpeed2Log,
	WindSpeedBayLog,
	Rain1Log,
	Rain2Log,
	OpenRoof1Log, CloseRoof1Log, StopRoof1Log,
	OpenRoof2Log, CloseRoof2Log, StopRoof2Log,
	Roof1ErrorLog, Roof2ErrorLog,
	Roof1WarningLog, Roof2WarningLog,
	LightLog, DehumidifierLog: FB_EventLog;
	RoofStatusLamp1,
	RoofStatusLamp2: FB_StatusLamp;
	WeatherAlarm,
	MotionAlarm1,
	MotionAlarm2:	BOOL;
	// indicates at least on environment signal is bad
	EnvironmentBad,
	// environment signal is bad for n seconds
	EnvironmentAlarm: BOOL;
	// time function block for Environment signal
	EnvironmentBadTimer: TON;
	// MQTT payload string for publishing
	sPayloadPub: STRING(255) := '';
	
END_VAR
VAR CONSTANT
	HumidityLimit:		REAL := 80.0;
	HumidityBayLow:		REAL := 55.0;
	HumidityBayHigh:	REAL := 70.0;
	
	WindSpeedLimit:		REAL := 20.0;
	WindSpeedBayLimit:	REAL :=	15.0;
	DustLimit:			REAL := 0.01;
	BrightnessLimit:	REAL := 50000.0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF GVL_Panel.IManualSwitch THEN
	nMode := RoofManual;
ELSE
	nMode := RoofAutomatic;
END_IF
isRoofManual := GVL_Panel.IManualSwitch;

// initialize MQTT Communication
MQTTCommunication();

// collect weather data
ConvertEnvironment();

// Handle Auxiliary inputs and outputs
Auxiliary();

// define bad weather condition; rain is handled in EnvironmentAlarm
EnvironmentBad := ConvertEnvironment.Dust > DustLimit OR
		ConvertEnvironment.Humidity1 > HumidityLimit OR
		ConvertEnvironment.Humidity2 > HumidityLimit OR
		ConvertEnvironment.HumidityBay > HumidityLimit OR
		ConvertEnvironment.WindSpeed1 > WindSpeedLimit OR
		ConvertEnvironment.WindSpeed2 > WindSpeedLimit OR
		ConvertEnvironment.Windspeed_bay > WindSpeedBayLimit OR
		ConvertEnvironment.Brightness > BrightnessLimit;

EnvironmentBadTimer(IN := EnvironmentBad,
					PT := T#30S);
					
EnvironmentAlarm := EnvironmentBadTimer.Q OR ConvertEnvironment.RainMasterAlarm;
			
IF nMode = RoofAutomatic THEN
	IF OpenRoofAuto THEN
		Roof1Command := OpenRoof;
		Roof2Command := OpenRoof;
	ELSIF CloseRoofAuto THEN
		Roof1Command := CloseRoof;
		Roof2Command := CloseRoof;
	ELSE
		Roof1Command := StopRoof;
		Roof2Command := StopRoof;
	END_IF

	// overwrite previous command if the weather is bad for xx seconds
	IF EnvironmentAlarm THEN
		Roof1Command := CloseRoof;
		Roof2Command := CloseRoof;
	END_IF
	
	IF ConvertEnvironment.HumidityBay > HumidityBayHigh AND
		Roof1Status = StatusLocked AND
		Roof2Status = StatusLocked THEN
		Environment.Dehumidifier := TRUE;
	ELSIF ConvertEnvironment.HumidityBay < HumidityBayLow THEN
		Environment.Dehumidifier := FALSE;
	END_IF
			
ELSE //	RoofManual
	OpenRoof1 := GVL_Panel.ILeftOpenSwitch AND NOT GVL_Panel.ILeftCloseSwitch;
	CloseRoof1 := GVL_Panel.ILeftCloseSwitch AND NOT GVL_Panel.ILeftOpenSwitch;
	StopRoof1 := NOT (GVL_Panel.ILeftOpenSwitch XOR GVL_Panel.ILeftCloseSwitch);
	
	IF OpenRoof1 THEN
		Roof1Command := OpenRoof;
	ELSIF CloseRoof1 THEN
		Roof1Command := CloseRoof;
	ELSE
		Roof1Command := StopRoof;
	END_IF

	OpenRoof2 := GVL_Panel.IRightOpenSwitch AND NOT GVL_Panel.IRightCloseSwitch;
	CloseRoof2 := GVL_Panel.IRightCloseSwitch AND NOT GVL_Panel.IRightOpenSwitch;
	StopRoof2 := NOT (GVL_Panel.IRightOpenSwitch XOR GVL_Panel.IRightCloseSwitch);
	
	IF OpenRoof2 THEN
		Roof2Command := OpenRoof;
	ELSIF CloseRoof2 THEN
		Roof2Command := CloseRoof;
	ELSE
		Roof2Command := StopRoof;
	END_IF
	Weatheralarm := ((Roof1Status = StatusOpened) OR (Roof2Status = StatusOpened))
					AND EnvironmentAlarm;
		
END_IF

// disable light after 1 hour if on automatic
LightTimer( IN := Environment.LightSwitch AND nMode = RoofAutomatic,
			PT := T#1H);
Environment.LightBay := (LightTimer.Q AND Environment.LightSwitch) OR 
						(nMode = RoofManual AND Environment.LightSwitch) OR
						(nMode = RoofAutomatic AND LightAuto);	

(*** Control Section ***)	

Dach1Control(   cmdRoofCommand := Roof1Command,
				bOpenSwitch1   := GVL_Roof.IDach1auf,
				bOpenSwitch2   := GVL_Roof.IDach1auf2,
				bClosedSwitch1 := GVL_Roof.IDach1zu,
				bClosedSwitch2 := GVL_Roof.IDach1zu2,
				bLocked1       := GVL_Roof.IRiegel11zu,
				bUnlocked1     := GVL_Roof.IRiegel11auf,
				bLocked2       := GVL_Roof.IRiegel21zu,
				bUnlocked2     := GVL_Roof.IRiegel21auf,
				bFastSwitch    := GVL_Roof.IDach1Schnell,
				bOpenLock1     => GVL_Roof.ORiegel11auf,
				bCloseLock1    => GVL_Roof.ORiegel11zu,
				bOpenLock2     => GVL_Roof.ORiegel21auf,
				bCloseLock2    => GVL_Roof.ORiegel21zu,
				bRoofOpen 	   => GVL_Roof.ODach1auf,
				bRoofClose     => GVL_Roof.ODach1zu,
				bMotorFast     => GVL_Roof.ODach1Schnell,
				RoofStatus     => Roof1Status,
				MotionAlarm    => MotionAlarm1);

Dach2Control(   cmdRoofCommand := Roof2Command,
				bOpenSwitch1   := GVL_Roof.IDach2auf,
				bOpenSwitch2   := GVL_Roof.IDach2auf2,
				bClosedSwitch1 := GVL_Roof.IDach2zu,
				bClosedSwitch2 := GVL_Roof.IDach2zu2,
				bLocked1       := GVL_Roof.IRiegel12zu,
				bUnlocked1     := GVL_Roof.IRiegel12auf,
				bLocked2       := GVL_Roof.IRiegel22zu,
				bUnlocked2     := GVL_Roof.IRiegel22auf,
				bFastSwitch    := GVL_Roof.IDach2Schnell,
				bOpenLock1     => GVL_Roof.ORiegel12auf,
				bCloseLock1    => GVL_Roof.ORiegel12zu,
				bOpenLock2     => GVL_Roof.ORiegel22auf,
				bCloseLock2    => GVL_Roof.ORiegel22zu,
				bRoofOpen      => GVL_Roof.ODach2auf,
				bRoofClose     => GVL_Roof.ODach2zu,
				bMotorFast     => GVL_Roof.ODach2Schnell,
				RoofStatus     => Roof2Status,
				MotionAlarm    => MotionAlarm2);


// Set status lamps
RoofStatusLamp1(RoofStatus := Roof1Status, RoofLamp => GVL_Panel.Roof1Lamp);
RoofStatusLamp2(RoofStatus := Roof2Status, RoofLamp => GVL_Panel.Roof2Lamp);
			
// sound horn
Environment.Horn := WeatherAlarm OR MotionAlarm1 OR MotionAlarm2;		

(*** Logging Section ***)

EnvironmentLog(	Trigger := EnvironmentAlarm, OnMessage := 'The weather is bad.', OffMessage := 'The weather is good.');
DustLog(		Trigger := ConvertEnvironment.Dust > DustLimit, OnMessage := 'Dust is over limit', OffMessage := 'Dust is under limit');
HumidityLog1(	Trigger := ConvertEnvironment.Humidity1 > HumidityLimit, OnMessage := 'Humidity 1 is over limit', OffMessage := 'Humidity 1 is under limit');
HumidityLog2(	Trigger := ConvertEnvironment.Humidity2 > HumidityLimit, OnMessage := 'Humidity 2 is over limit', OffMessage := 'Humidity 2 is under limit');
HumidityBayLog(	Trigger := ConvertEnvironment.HumidityBay > HumidityLimit, OnMessage := 'Humidity bay is over limit', OffMessage := 'Humidity Bay is under limit');
WindSpeed1Log(	Trigger := ConvertEnvironment.WindSpeed1 > WindSpeedLimit, OnMessage := 'Wind speed 1 is over limit', OffMessage := 'Wind speed 1 is under limit');
WindSpeed2Log(	Trigger := ConvertEnvironment.WindSpeed2 > WindSpeedLimit, OnMessage := 'Wind speed 2 is over limit', OffMessage := 'Wind speed 2 is under limit');
WindSpeedBayLog(Trigger := ConvertEnvironment.Windspeed_bay > WindSpeedBayLimit, OnMessage := 'Wind speed in bay is over limit', OffMessage := 'Wind speed in bay is under limit');
Rain1Log(		Trigger := NOT Environment.Rain_alarm1, OnMessage := 'Rain alarm 1 is on', OffMessage := 'Rain alarm 1 is off');
Rain2Log(		Trigger := NOT Environment.Rain_alarm2, OnMessage := 'Rain alarm 2 is on', OffMessage := 'Rain alarm 2 is off');

OpenRoof1Log( Trigger := Roof1Command = OpenRoof, OnMessage := 'Open roof 1');
OpenRoof2Log( Trigger := Roof2Command = OpenRoof, OnMessage := 'Open roof 2');
CloseRoof1Log( Trigger := Roof1Command = CloseRoof, OnMessage := 'Close roof 1');
CloseRoof2Log( Trigger := Roof2Command = CloseRoof, OnMessage := 'Close roof 2');
StopRoof1Log( Trigger := Roof1Command = StopRoof, OnMessage := 'Stop roof 1');
StopRoof2Log( Trigger := Roof2Command = StopRoof, OnMessage := 'Stop roof 2');

Roof1ErrorLog( Trigger := Roof1Status = StatusError, Level := ADSLOG_MSGTYPE_ERROR, OnMessage := 'Roof 1 has an error!');
Roof2ErrorLog( Trigger := Roof2Status = StatusError, Level := ADSLOG_MSGTYPE_ERROR, OnMessage := 'Roof 2 has an error!');

Roof1WarningLog( Trigger := Roof1Status = StatusUndefined, Level := ADSLOG_MSGTYPE_WARN, OnMessage := 'The status of roof 1 is undefined!');
Roof2WarningLog( Trigger := Roof2Status = StatusUndefined, Level := ADSLOG_MSGTYPE_WARN, OnMessage := 'The status of roof 2 is undefined!');

LightLog(Trigger := Environment.LightBay, OnMessage := 'The light is on.', OffMessage := 'The light is off.');
DehumidifierLog(Trigger := Environment.Dehumidifier, OnMessage := 'The dehumidifier is on.', OffMessage := 'The dehumidifier is off.');

(*** MQTT Section ***)
IF Roof1Status <> LastRoof1Status THEN
	sPayloadPub := 'roof,location=roof1,host=CX-284792 ';
	sPayloadPub := APPEND(sPayloadPub, 'Roof1Status=', RoofStatus_TO_String(Roof1Status));
	
	MQTTCommunication.fbMqttClient.Publish(	
					sTopic:= 'STELLA/Telemetry', 
					pPayload:= ADR(sPayloadPub), 
					nPayloadSize:= LEN2(ADR(sPayloadPub)),
					eQoS:= TcIotMqttQos.AtMostOnceDelivery,
					bRetain:= FALSE, 
					bQueue:= FALSE );
	LastRoof1Status := Roof1Status;
END_IF

IF Roof2Status <> LastRoof2Status THEN
	sPayloadPub := 'roof,location=roof2,host=CX-284792 ';
	sPayloadPub := APPEND(sPayloadPub, 'Roof2Status=', RoofStatus_TO_String(Roof2Status));
	
	MQTTCommunication.fbMqttClient.Publish(	
					sTopic:= 'STELLA/Telemetry', 
					pPayload:= ADR(sPayloadPub), 
					nPayloadSize:= LEN2(ADR(sPayloadPub)),
					eQoS:= TcIotMqttQos.AtMostOnceDelivery,
					bRetain:= FALSE, 
					bQueue:= FALSE );
	LastRoof2Status := Roof2Status;
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="10" Count="4" />
      <LineId Id="601" Count="0" />
      <LineId Id="870" Count="0" />
      <LineId Id="781" Count="0" />
      <LineId Id="603" Count="0" />
      <LineId Id="783" Count="0" />
      <LineId Id="785" Count="0" />
      <LineId Id="784" Count="0" />
      <LineId Id="798" Count="2" />
      <LineId Id="782" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="213" Count="6" />
      <LineId Id="605" Count="0" />
      <LineId Id="531" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="797" Count="0" />
      <LineId Id="796" Count="0" />
      <LineId Id="30" Count="11" />
      <LineId Id="539" Count="0" />
      <LineId Id="534" Count="0" />
      <LineId Id="533" Count="0" />
      <LineId Id="537" Count="1" />
      <LineId Id="536" Count="0" />
      <LineId Id="42" Count="6" />
      <LineId Id="61" Count="2" />
      <LineId Id="769" Count="3" />
      <LineId Id="64" Count="6" />
      <LineId Id="777" Count="3" />
      <LineId Id="71" Count="8" />
      <LineId Id="88" Count="2" />
      <LineId Id="768" Count="0" />
      <LineId Id="91" Count="5" />
      <LineId Id="767" Count="0" />
      <LineId Id="97" Count="41" />
      <LineId Id="786" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="400" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="766" Count="0" />
      <LineId Id="709" Count="27" />
      <LineId Id="765" Count="0" />
      <LineId Id="737" Count="27" />
      <LineId Id="708" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>